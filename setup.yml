---
- name: Install dependencies
  hosts: localhost
  connection: local
  become: yes
  become_method: sudo
  
  tasks:
  - name: uninstall docker-py if present
    pip: 
      name: "docker-py"
      state: absent
    notify: 
      - uninstall docker pip #workaround since docker-py install breaks docker install - they share the same namespace

  - name: Flush handlers
    meta: flush_handlers

  - name: install docker pip
    pip: 
      name: "docker"
      state: present
  
  handlers:
  - name: uninstall docker pip
    pip:
      name: "docker"
      state: absent
      

- name: Canary Setup
  hosts: localhost
  become: yes
  become_method: sudo
  connection: local
  vars_files:
    - config.yml
  
  tasks:
  - name: Template Dockerfile
    template:
      src: "./{{ dockerfile_name_canary }}.j2"
      dest: "{{ dockerfile_name_canary }}"
  - name: Build image
    docker_image:
      build:
        path: .
        dockerfile: "{{ dockerfile_name_canary }}"
      name: "{{ image_name }}"
      source: build
      state: present

  - name: Create a volume for cloud config
    become: yes
    become_method: sudo
    docker_volume:
      name: "{{ cloud_volume_name }}"
      
  - name: Create a volume for logs 
    become: yes
    become_method: sudo
    docker_volume:
      name: "{{ logs_volume_name }}"

  - name: Start container
    docker_container:
      name: "{{ container_name }}"
      image: "{{ image_name }}"
      detach: yes
      tty: yes
      mounts:
        - source: "{{ cloud_volume_name }}"
          target: "/{{ cloud_volume_name }}"
        - source: "{{ logs_volume_name }}"
          target: "/var/log/{{ logs_volume_name }}"

  - name: symlink cloud volume to host
    file:
      src: "{{ docker_runtime_directory }}/volumes/{{ cloud_volume_name }}/_data"
      path: "./{{ cloud_volume_name }}"
      state: link

  - name: symlink logs volume to host
    file:
      src: "{{ docker_runtime_directory or '/var/lib/docker' }}/volumes/{{ logs_volume_name }}/_data"
      path: "/var/log/{{ logs_volume_name }}"
      state: link
      
  - name: Configure tempest
    command: > 
      docker exec
      -e OS_PROJECT_DOMAIN_NAME={{ os_project_domain_name | default(lookup('env','OS_PROJECT_DOMAIN_NAME'),true) | quote }}
      -e OS_USER_DOMAIN_NAME={{os_user_domain_name | default(lookup('env','OS_USER_DOMAIN_NAME'),true) | quote }}
      -e OS_PROJECT_NAME={{ os_project_name | default(lookup('env','OS_PROJECT_NAME'),true) | quote }}
      -e OS_TENANT_NAME={{ os_tenant_name | default(lookup('env','OS_TENANT_NAME'),true) | quote }}
      -e OS_USERNAME={{ os_username | default(lookup('env','OS_USERNAME'),true) | quote }}
      -e OS_PASSWORD={{ os_password | default(lookup('env','OS_PASSWORD'),true) | quote }}
      -e OS_AUTH_URL={{ os_auth_url | default(lookup('env','OS_AUTH_URL'),true) | quote }}
      -e OS_INTERFACE={{ os_interfac | default(lookup('env','OS_INTERFACE'),true) | quote }}
      -e OS_ENDPOINT_TYPE={{ os_endpoint_type | default(lookup('env','OS_ENDPOINT_TYPE'),true) | quote }}
      -e OS_IDENTITY_API_VERSION={{ os_identity_api_version | default(lookup('env','OS_IDENTITY_API_VERSION'),true) | quote }}
      -e OS_REGION_NAME={{ os_region_name | default(lookup('env','OS_REGION_NAME'),true) | quote }}
      -e OS_AUTH_PLUGIN={{ os_auth_plugin | default(lookup('env','OS_AUTH_PLUGIN'),true) | quote }}
      -e FLOATING_IPS={{ floating_ips }}
      -e FLOATING_NET_ID={{ floating_net_id }}
      -e PUB_NET_ID={{ pub_net_id }}

      {{ container_name }} bash -c 
      'cd cloud && discover-tempest-config 
      --out /cloud/etc/tempest.conf --non-admin 
      --os-auth-url $OS_AUTH_URL --os-project-name $OS_PROJECT_NAME 
      --os-user-domain-name $OS_USER_DOMAIN_NAME 
      --os-project-domain-name $OS_PROJECT_DOMAIN_NAME
      --os-region-name $OS_REGION_NAME --os-interface public
      --os-api-version $OS_IDENTITY_API_VERSION 
      network-feature-enabled.floating_ips $FLOATING_IPS
      network.public_network_id $PUB_NET_ID 
      auth.test_accounts_file /cloud/etc/accounts.yml
      network.floating_network_name $FLOATING_NET_ID'

  - name: Append tempest.conf with health monitor section header
    lineinfile:
      path: ./{{ cloud_volume_name }}/etc/tempest.conf
      line: "[healthmon]"

  - name: Append tempest.conf with test config
    blockinfile: 
      path: ./{{ cloud_volume_name }}/etc/tempest.conf
      block: |
        image = {{ item.0 }}
        ssh_user = {{ item.1 }}
        flavor = {{ item.2 }}
      marker: "# {mark} ANSIBLE MANAGED BLOCK - CONFIG {{idx+1}}"
    loop: "{{ images | zip(ssh_users, flavors) | list }}"
    loop_control:
      index_var: idx
  - name: Append tempest.conf with test config - alternative config
    blockinfile: 
      path: ./{{ cloud_volume_name }}/etc/tempest.conf
      block: |
        image_alt = {{ item.0 }}
        ssh_user_alt = {{ item.1 }}
        flavor_alt = {{ item.2 }}
      marker: "# {mark} ANSIBLE MANAGED BLOCK - ALT CONFIG {{idx+1}}"
    loop: "{{ images_alt | zip(ssh_users_alt, flavors_alt) | list }}"
    loop_control:
      index_var: idx
    when: images_alt is defined and ssh_users_alt is defined and flavors_alt is defined
  
  - name: Configure accounts.yml
    blockinfile:
      path: ./{{ cloud_volume_name }}/etc/accounts.yml
      block: |
        - username: '{{ os_username | default(lookup('env','OS_USERNAME'),true) }}'
          tenant_name: '{{ os_project_name | default(lookup('env','OS_PROJECT_NAME'),true) }}'
          password: '{{ os_password | default(lookup('env','OS_PASSWORD'),true) }}'

- name: Setup cron job to execute CI job
  hosts: localhost
  become: yes
  become_method: sudo
  connection: local
  vars_files:
    - config.yml
  
  tasks:
  - name: Template cron job
    template:
      src: ./cronjob.j2
      dest: cronjob
  - name: Build cron image
    docker_image:
      build:
        path: .
        dockerfile: "{{ dockerfile_name_cron }}"
      name: "{{ cron_image_name }}"
      source: build
      state: present
  - name: Start container
    docker_container:
      name: "{{ cron_container_name }}"
      image: "{{ cron_image_name }}"
      detach: yes
      tty: yes
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock







  # - name: Append tempest.conf with images
  #   lineinfile:
  #     path: ./cloud/etc/tempest.conf
  #     line: "image = {{ item }}"
  #   loop: "{{ images }}"
  # - name: Append tempest.conf with flavors
  #   lineinfile:
  #     path: ./cloud/etc/tempest.conf
  #     line: "flavor = {{ item }}"
  #   loop: "{{ flavors }}"
  # - name: Append tempest.conf with ssh_users
  #   lineinfile:
  #     path: ./cloud/etc/tempest.conf
  #     line: "ssh_user = {{ item }}"
  #   loop: "{{ ssh_users }}"
  # - name: Append tempest.conf with images_alt
  #   lineinfile:
  #     path: ./cloud/etc/tempest.conf
  #     line: "image_alt = {{ item }}"
  #   loop: "{{ images_alt }}"
  #   when: images_alt is defined
  # - name: Append tempest.conf with flavors_alt
  #   lineinfile:
  #     path: ./cloud/etc/tempest.conf
  #     line: "flavor_alt = {{ item }}"
  #   loop: "{{ flavors_alt }}"
  #   when: flavors_alt is defined
  # - name: Append tempest.conf with ssh_users_alt
  #   lineinfile:
  #     path: ./cloud/etc/tempest.conf
  #     line: "ssh_user_alt = {{ item }}"
  #   loop: "{{ ssh_users_alt }}"
  #   when: ssh_users_alt is defined



  # - name: Add accounts.yaml for running tempest 
