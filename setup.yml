---
- name: Install dependencies
  hosts: localhost
  connection: local
  vars_files:
    - config.yml
  tasks:
  - name: Uninstall docker-py if present
    become: yes
    become_method: sudo
    pip: 
      name: "docker-py"
      state: absent
    notify: 
      - uninstall docker pip #workaround since docker-py install breaks docker install - they share the same namespace

  - name: Flush handlers
    meta: flush_handlers

  - name: install docker pip
    become: yes
    become_method: sudo
    pip: 
      name: "docker"
      state: present
      
  handlers:
  - name: uninstall docker pip
    become: yes
    become_method: sudo
    pip:
      name: "docker"
      state: absent
      

- name: Canary Setup
  hosts: localhost
  become: yes
  become_method: sudo
  connection: local
  vars_files:
    - config.yml
    - slack_api_creds.yml
  
  tasks:
  - name: Set OS cloud facts
    set_fact:
      os_username: "{{ os_username | default(lookup('env','OS_USERNAME'),true) }}"
      os_password: "{{ os_password | default(lookup('env','OS_PASSWORD'),true) }}"
      os_auth_url: "{{ os_auth_url | default(lookup('env','OS_AUTH_URL'),true) }}"
      os_project_domain_name: "{{ os_project_domain_name | default(lookup('env','OS_PROJECT_DOMAIN_NAME'),true) }}"
      os_project_domain_id: "{{ os_project_domain_id | default(lookup('env','OS_PROJECT_DOMAIN_ID'),true) }}"
      os_user_domain_name: "{{  os_user_domain_name | default(lookup('env','OS_USER_DOMAIN_NAME'),true)  }}"
      os_user_domain_id: "{{  os_user_domain_id | default(lookup('env','OS_USER_DOMAIN_ID'),true)  }}"
      os_project_name: "{{ os_project_name | default(lookup('env','OS_PROJECT_NAME'), true) }}"
      os_project_id: "{{ os_project_id | default(lookup('env','OS_PROJECT_ID'),true) }}"
      os_tenant_name: "{{ os_tenant_name | default(lookup('env','OS_TENANT_NAME'),true) }}"
      os_tenant_id: "{{ os_tenant_id | default(lookup('env','OS_TENANT_ID'),true) }}"
      os_interface: "{{ os_interface | default(lookup('env','OS_INTERFACE'),true) }}"
      os_endpoint_type: "{{ os_endpoint_type | default(lookup('env','OS_ENDPOINT_TYPE'),true) }}"
      os_identity_api_version : "{{ os_identity_api_version | default(lookup('env','OS_IDENTITY_API_VERSION'),true) }}"
      os_region_name: "{{ os_region_name | default(lookup('env','OS_REGION_NAME'),true) }}"
      os_auth_plugin: "{{ os_auth_plugin | default(lookup('env','OS_AUTH_PLUGIN'),true) }}"

  - name: Create a volume for cloud config
    become: yes
    become_method: sudo
    docker_volume:
      name: "{{ cloud_volume_name }}"
      
  - name: Create a volume for logs 
    become: yes
    become_method: sudo
    docker_volume:
      name: "{{ logs_volume_name }}"

  - name: Template monitor Dockerfile
    template:
      src: "./templates/Dockerfile.j2"
      dest: "{{ dockerfile_name_canary }}"

  - name: Build monitor image
    docker_image:
      build:
        path: .
        dockerfile: "{{ dockerfile_name_canary }}"
      name: "{{ image_name }}"
      source: build
      state: present
  
  - name: Start monitor container
    docker_container:
      name: "{{ container_name }}"
      image: "{{ image_name }}"
      detach: yes
      tty: yes
      mounts:
        - source: "{{ cloud_volume_name }}"
          target: "/{{ cloud_volume_name }}"
        - source: "{{ logs_volume_name }}"
          target: "/var/log/{{ logs_volume_name }}"
  
  - name: Template notifier Dockerfile
    template:
      src: "./templates/notifierDockerfile.j2"
      dest: "./notify-service/{{ dockerfile_name_notify }}"
  
  - name: Build notifier image
    docker_image:
      build:
        path: .
        dockerfile: "./notify-service/{{ dockerfile_name_notify }}"
      name: "{{ notify_image_name }}"
      source: build
      state: present
  
  - name: Start notify container
    docker_container:
      name: "{{ notify_container_name }}"
      image: "{{ notify_image_name }}"
      detach: yes
      tty: yes
      mounts:
        - source: "{{ logs_volume_name }}"
          target: "/var/log/{{ logs_volume_name }}"
  
  - name: Template notify job
    template:
      src: "./templates/notifyjob.j2"
      dest: ./notify-service/notifyjob
  
  - name: inject notify job and start
    shell: >
      docker cp ./notify-service/notifyjob {{ notify_container_name }}:notifyjob
      && docker cp ./notify-service/notify.py {{ notify_container_name }}:notify.py
      && docker exec -u 0 {{ notify_container_name }} bash -c 
      'chown {{ notify_uid }}:{{ notify_gid }} notify.py
      && chown {{ notify_uid }}:{{ notify_gid }} notifyjob
      && touch notify.log 
      && chown {{ notify_uid }}:{{ notify_gid }} notify.log
      && chmod +x notifyjob
      && ./notifyjob > notify.log 2>&1 &'

  - name: Template notify cronjob
    template:
      src: "./templates/notifycronjob.j2"
      dest: ./notify-service/notifycronjob
  
  - name: inject notify cronjob and apply
    shell: >
      docker cp ./notify-service/notifycronjob {{ notify_container_name }}:/etc/cron.d/cronjob
      && docker exec -u 0 {{ notify_container_name }} bash -c 
      'chmod 0644 /etc/cron.d/cronjob
      && crontab /etc/cron.d/cronjob
      && cron -f &'

  - name: symlink cloud volume to host
    file:
      src: "{{ docker_runtime_directory }}/volumes/{{ cloud_volume_name }}/_data"
      path: "./{{ cloud_volume_name }}"
      state: link

  - name: symlink logs volume to host
    file:
      src: "{{ docker_runtime_directory or '/var/lib/docker' }}/volumes/{{ logs_volume_name }}/_data"
      path: "/var/log/{{ logs_volume_name }}"
      state: link
  
  # - name: Check Keystone authentication
  #   openstack.cloud.auth:
  #     auth: {
  #       "os_username": "{{ os_username }}",
  #       "os_password": "{{ os_password }}",
  #       "os_auth_url": "{{ os_auth_url }}",
  #       "os_project_domain_name": "{{ os_project_domain_name }}",
  #       "os_project_domain_id": "{{ os_project_domain_id }}",
  #       "os_user_domain_name": "{{  os_user_domain_name }}",
  #       "os_user_domain_id": "{{  os_user_domain_id }}",
  #       "os_project_name": "{{ os_project_name }}",
  #       "os_project_id": "{{ os_project_id }}",
  #       "os_tenant_name": "{{ os_tenant_name }}",
  #       "os_tenant_id": "{{ os_tenant_id }}",
  #       "os_interface": "{{ os_interface }}",
  #       "os_endpoint_type": "{{ os_endpoint_type }}",
  #       "os_identity_api_version" : "{{ os_identity_api_version }}",
  #       "os_region_name": "{{ os_region_name }}",
  #       "os_auth_plugin": "{{ os_auth_plugin }}",
  #     }

  - name: Check minimum definitions exist
    assert:
      that:
        - pub_net_id is defined
        - pub_net_id |length
        - os_username |length
        - os_password |length
        - os_auth_url |length
      fail_msg: "Some or all of the required configuration parameters were not provided. Please source an OS RC file and/or edit 'config.yml'."

  - name: Pull latest from repos in container
    shell: >
      docker exec -u 0 {{ container_name }} bash -c 'cd /{{ cloud_volume_name }}/tempest-fork/ && git checkout no_admin_creds && git pull && pip3 install /{{ cloud_volume_name }}/tempest-fork/' &&
      docker exec -u 0 {{ container_name }} bash -c 'cd /{{ cloud_volume_name }}/python-tempestconf/ && git checkout master && git pull && pip3 install /{{ cloud_volume_name }}/python-tempestconf/' &&
      docker exec -u 0 {{ container_name }} bash -c 'cd /{{ cloud_volume_name }}/HealthMonitorTempestPlugin/ && git checkout main && git pull &&  pip3 install /{{ cloud_volume_name }}/HealthMonitorTempestPlugin/'
    when: not dev
  
  - name: Copy local changes into container
    shell: >
        rm -rf ./{{ cloud_volume_name }}/HealthMonitorTempestPlugin && 
        rm -rf ./{{ cloud_volume_name }}/tempest-fork && 
        rm -rf ./{{ cloud_volume_name }}/python-tempestconf && 
        cp -r HealthMonitorTempestPlugin ./{{ cloud_volume_name }} &&
        cp -r tempest-fork ./{{ cloud_volume_name }} &&
        cp -r python-tempestconf ./{{ cloud_volume_name }} && 
        docker exec -u 0 {{ container_name }} bash -c 'cd /{{ cloud_volume_name }} && pip3 install tempest-fork/' && 
        docker exec -u 0 {{ container_name }} bash -c 'cd /{{ cloud_volume_name }} && pip3 install HealthMonitorTempestPlugin/' && 
        docker exec -u 0 {{ container_name }} bash -c 'cd /{{ cloud_volume_name }} && pip3 install python-tempestconf/'
    when: dev 
  - name: Configure tempest
    shell: > 
      docker exec
      {{ container_name }} bash -c 
      'cd {{ cloud_volume_name }}/cloud && discover-tempest-config 
      --out /{{ cloud_volume_name }}/cloud/etc/tempest.conf --non-admin 
      --os-username {{ os_username }}
      --os-password {{ os_password }}
      --os-auth-url {{ os_auth_url }} 
      {% if os_project_domain_name |length %}
      --os-project-domain-name {{ os_project_domain_name }}
      {% endif %}
      {% if os_project_domain_id |length %}
      --os-project-domain-id {{ os_project_domain_id }}
      {% endif %}
      {% if os_user_domain_name |length %}
      --os-user-domain-name {{ os_user_domain_name }} 
      {% endif %}
      {% if os_user_domain_id |length %}
      --os-user-domain-id {{ os_user_domain_id }}
      {% endif %}
      {% if os_project_name |length %}
      --os-project-name {{ os_project_name }}
      {% endif %}
      {% if os_project_id |length %}
      --os-project-id {{ os_project_id }}
      {% endif %}
      {% if os_tenant_name |length %}
      --os-tenant-name {{ os_tenant_name }}
      {% endif %}
      {% if os_tenant_id |length %}
      --os-tenant-id {{ os_tenant_id }}
      {% endif %}
      {% if os_interface |length %}
      --os-interface {{ os_interface }}
      {% endif %}
      {% if os_endpoint_type |length %}
      --os-endpoint-override {{ os_endpoint_type }}
      {% endif %}
      {% if os_identity_api_version |length %}
      --os-api-version {{ os_identity_api_version }}
      {% endif %}
      {% if os_region_name |length %}
      --os-region-name {{ os_region_name }} 
      {% endif %}
      {% if os_auth_plugin |length %}
      --os-auth-plugin {{ os_auth_plugin }} 
      {% endif %}
      {% if floating_ips is defined and floating_ips %}
      network-feature-enabled.floating_ips {{ floating_ips }}
      {% endif %}
      {% if floating_net_id is defined and floating_net_id|length %}
      network.floating_network_name {{ floating_net_id }}
      {% endif %}
      {% if services_disabled is not none and services_disabled|length %}
      {% for service in services_disabled %}
      service_available.{{ service }} False
      {% endfor %}
      {% endif %}
      auth.test_accounts_file /{{ cloud_volume_name }}/cloud/etc/accounts.yml
      network.public_network_id {{ pub_net_id }}'

  - name: Append tempest.conf with health monitor section header
    lineinfile:
      path: ./{{ cloud_volume_name }}/cloud/etc/tempest.conf
      line: "[healthmon]"

  - name: Append tempest.conf with images
    lineinfile:
      path: ./{{ cloud_volume_name }}/cloud/etc/tempest.conf
      line: "#{{ idx+1 }}\nimage = {{ item }}"
    loop: "{{ images }}"
    loop_control:
      index_var: idx

  - name: Append tempest.conf with flavors
    lineinfile:
      path: ./{{ cloud_volume_name }}/cloud/etc/tempest.conf
      line: "#{{ idx+1 }}\nflavor = {{ item }}"
    loop: "{{ flavors }}"
    loop_control:
      index_var: idx

  - name: Append tempest.conf with ssh_users
    lineinfile:
      path: ./{{ cloud_volume_name }}/cloud/etc/tempest.conf
      line: "#{{ idx+1 }}\nssh_user = {{ item }}"
    loop: "{{ ssh_users }}"
    loop_control:
      index_var: idx

  - name: Append tempest.conf with images_alt
    lineinfile:
      path: ./{{ cloud_volume_name }}/cloud/etc/tempest.conf
      line: "#{{ idx+1 }}\nimage_alt = {{ item }}"
    loop: "{{ images_alt }}"
    when: images_alt is defined
    loop_control:
      index_var: idx

  - name: Append tempest.conf with flavors_alt
    lineinfile:
      path: ./{{ cloud_volume_name }}/cloud/etc/tempest.conf
      line: "#{{ idx+1 }}\nflavor_alt = {{ item }}"
    loop: "{{ flavors_alt }}"
    when: flavors_alt is defined
    loop_control:
      index_var: idx

  - name: Append tempest.conf with ssh_users_alt
    lineinfile:
      path: ./{{ cloud_volume_name }}/cloud/etc/tempest.conf
      line: "#{{ idx+1 }}\n ssh_user_alt = {{ item }}"
    loop: "{{ ssh_users_alt }}"
    when: ssh_users_alt is defined
    loop_control:
      index_var: idx

  - name: remove tempest-lock (in case job was cut short)
    shell: > 
      docker exec {{ container_name }} bash -c 'rm -f /cloud/cloud/tests.pos'
  
  - name: restart jobs
    shell: > 
      docker exec {{ container_name }} bash -c 'rm -rf /tmp/tempest-lock'
  
  - name: Configure accounts.yml
    blockinfile:
      path: ./{{ cloud_volume_name }}/cloud/etc/accounts.yml
      block: |
        - username: '{{ os_username | default(lookup('env','OS_USERNAME'),true) }}'
          tenant_name: '{{ os_project_name | default(lookup('env','OS_PROJECT_NAME'),true) }}'
          password: '{{ os_password | default(lookup('env','OS_PASSWORD'),true) }}'

- name: Setup cron job to execute CI job
  hosts: localhost
  become: yes
  become_method: sudo
  connection: local
  vars_files:
    - config.yml
  
  tasks:
  - name: Template cron job
    template:
      src: ./templates/cronjob.j2
      dest: cronjob

  - name: Build cron image
    docker_image:
      build:
        path: .
        dockerfile: "{{ dockerfile_name_cron }}"
      name: "{{ cron_image_name }}"
      source: build
      state: present

  - name: Start container
    docker_container:
      name: "{{ cron_container_name }}"
      image: "{{ cron_image_name }}"
      detach: yes
      tty: yes
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
  
  - name: inject cronjob and apply
    shell: >
      docker cp cronjob {{ cron_container_name }}:/etc/cron.d/cronjob
      && docker exec {{ cron_container_name }} bash -c 
      'chmod 0644 /etc/cron.d/cronjob
      && crontab /etc/cron.d/cronjob'



  # - name: Add accounts.yaml for running tempest 
